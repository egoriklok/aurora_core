def calculate_average(numbers):
    positive_numbers = [n for n in numbers if n > 0]
    if not positive_numbers:
        return None
    return sum(positive_numbers) / len(positive_numbers)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, -2, 3): ")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
try:
    number_list = [int(n.strip()) for n in user_input.split(',')]
except ValueError:
    print("–û—à–∏–±–∫–∞: –í–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
    exit()

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
result = calculate_average(number_list)

with open("interactive_log.txt", "w") as log_file:
    if result is not None:
        log_file.write(f"–°—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {result}\n")
        print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {result}")
    else:
        log_file.write("‚ùó –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞.\n")
        print("‚ùó –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞.")

class Agent:
    def __init__(self):
        self.chat_history = []
        self.positive_inputs = 0  # Add a counter for positive inputs

    def add_to_chat_history(self, input, response, positive):
        self.chat_history.append((input, response, positive))
        if positive:  # Increment the counter if the input is positive
            self.positive_inputs += 1

    def get_chat_history(self):
        return self.chat_history

    def get_positive_inputs(self):
        return self.positive_inputs
def run_agent():
    while True:
        print("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
        print("1 - –í–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö")
        print("2 - –í—ã–π—Ç–∏")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")

        if choice == "1":
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥ –∏ —Ä–∞—Å—á—ë—Ç
            user_input = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, -2, 3): ")
            try:
                number_list = [int(n.strip()) for n in user_input.split(',')]
            except ValueError:
                print("–û—à–∏–±–∫–∞: –í–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
                continue

            result = calculate_average(number_list)
            with open("interactive_log.txt", "a") as log_file:
                if result is not None:
                    log_file.write(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {result}\n")
                    print(f"‚úÖ –°—Ä–µ–¥–Ω–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª: {result}")
                else:
                    log_file.write("‚ùó –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞.\n")
                    print("‚ùó –ù–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞.")
        elif choice == "2":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
run_agent()





